#!/usr/bin/python3
import sys, crypt, subprocess as sp, random, string, getpass, os, pwd


# This function is used to display the starting menu options
def displayMenu():
    print("\n Select one of the following user management option")
    print("*" * 50)
    print(" 1. Create a new user \n 2. Remove an existing user \n 3. Modify an existing user \n 4. Quit")


# This function validates the option selection from the user when displaying the menu.
def selectOption():
    selectOption = -1
    while selectOption not in range(1,5):
        displayMenu()
        selectOption = int(input("Enter one of the options above: "))
    return selectOption


# This function checks if the given user exists already
def userCheck(userN):
    try:
        pwd.getpwnam(userN)
        return True
    except:
        return False


# This function creates a user based on the user's input
def createU():
    firstN = input("What is the first name of the user: ")
    lastN = input("What is the last name of the user: ")
    userN = input("What is the account's username:  ")
    # Prompts the question once more if user already exists
    while userCheck(userN):
        print("Account already exists, please retry.")
        userN = input("What is the account's username:  ")

    # The password is generated by the random module to create a 7 letter password
    password = (''.join(random.choice(string.ascii_letters) for i in range(7)))
    name = firstN + lastN
    try:
        # Encrypts the password to add and uses useradd with the name as the comment.
        encpassword = crypt.crypt(password)
        sp.run(['useradd', '-c', name, '-p', encpassword, userN])
    except:
        print("The account could not be created.")
        exit(-1)
    print(str(userN) + "'s user created successfully.")


# This function removes the user that is given
def removeU():
    uName = input("Enter the username of the user you want to remove: ")
    # Repeats the prompt if user doesn't exists
    while not userCheck(uName):
        uName = input("Enter the username of the user you want to remove: ")

    try:
        # Uses userdel to force delete the user and their home directory
        sp.call(["userdel", '-r', '-f', uName])
        print(str(uName) + "'s account has been deleted.")
    except:
        print("The user account could not be deleted.")
        sys.exit(-1)
    print("The user account has been deleted.")


# This function modifies the user's account
def userMod():
    uName = input("Enter the username of the user you want to modify: ")
    # Prompts user for input if account does not exists
    while not userCheck(uName):
        uName = input("Enter the username of the user you want to modify: ")
    # Prints out the modification options
    print("Select from the following options: \n 1. Lock the account \n 2. Change the real name associated with the "
          "account. ")
    userO = int(input("What option would you like? "))
    # Checks each case, 1 locks the account while 2 changes the real name to the account.
    if userO == 1:
        try:
            # uses usermod to lock the account
            sp.run(['usermod', '-L', uName])
            print(str(uName) + "'s account has been locked.")
        except:
            print("The user's account could not be locked.")
            exit(-1)
    elif userO == 2:
        newFN = input("Enter the user's new first name: ")
        newLN = input("Enter user's new last name: ")
        newN = newFN + newLN
        try:
            # uses usermod to change the real name associated
            sp.run(['usermod', '-c', newN, uName])
        except:
            print("The user's real name could not be changed.")
            exit(-1)
    else:
        print("Invalid input")
        exit(-1)


# Initiates the entire program by prompting the user.
def main():
    manageOption = -1

    while manageOption != 4:
        manageOption = selectOption()

        if manageOption == 1:
            createU()
        elif manageOption == 2:
            removeU()
        elif manageOption == 3:
            userMod()
        else:
            exit(-1)

main()
